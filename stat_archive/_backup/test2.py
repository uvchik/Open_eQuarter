# OeQ autogenerated correlation for 'testcorrelation'

import math
import numpy as np
def correl(xin,mode='distribution',weights=None):
    if weights is None:
        weights=np.repeat(1,4)

    # OeQ autogenerated correlation for 'Buildings with housing, no common walls'
    Const= 0.856328483874
    a=     -0.0565504308161
    b=     -0.430106842527
    c=     0.228113108826
    d=     -0.0370470205099
    x=xin
    x=math.log(x)
    BLD_COMWALL_0 = Const + a*x + b*x**2 + c*x**3 + d*x**4
    # OeQ autogenerated correlation for 'Buildings with housing, 1 common wall'
    Const= -0.0842414630334
    a=     0.172844609043
    b=     -0.0428699365349
    c=     0.00439921919651
    d=     -0.000161116212725
    x=xin
    BLD_COMWALL_1 = Const + a*x + b*x**2 + c*x**3 + d*x**4
    # OeQ autogenerated correlation for 'Buildings with housing, 2 common walls'
    Const= 0.05608817677
    a=     -0.278461889568
    b=     0.872985152354
    c=     -0.489634333883
    d=     0.0901145347064
    x=xin
    x=math.log(x)
    BLD_COMWALL_2 = Const + a*x + b*x**2 + c*x**3 + d*x**4
    # OeQ autogenerated correlation for 'Buildings with housing, number of common walls unknown'
    Const= 0.0733977505987
    a=     -0.0504430300137
    b=     0.0315591813066
    c=     -0.00588688675497
    x=xin
    x=math.log(x)
    BLD_COMWALL_OTH = Const + a*x + b*x**2 + c*x**3
 
    l_sum = BLD_COMWALL_0 + BLD_COMWALL_1 + BLD_COMWALL_2 + BLD_COMWALL_OTH
    if mode is 'distribution':
        return {'BLD_COMWALL_0' : BLD_COMWALL_0/l_sum, 'BLD_COMWALL_1' : BLD_COMWALL_1/l_sum, 'BLD_COMWALL_2' : BLD_COMWALL_2/l_sum, 'BLD_COMWALL_OTH' : BLD_COMWALL_OTH/l_sum}

    return(BLD_COMWALL_0/l_sum * weights[0] + BLD_COMWALL_1/l_sum * weights[1] + BLD_COMWALL_2/l_sum * weights[2] + BLD_COMWALL_OTH/l_sum * weights[3] )
    
n=correl(4)
print n["BLD_COMWALL_1"]
